import { getTimeFromDate, type Day, type Duration } from "$lib";
import { error } from "@sveltejs/kit";

/**
 * Represents one row in a CSV file generated by AutoSleep.
 */
export interface AutoSleepCsvRow {
  ISO8601: string;
  fromDate: string;
  toDate: string;
  bedtime: string;
  waketime: string;
  asleep: string;
  sleepBPM: string;
  notes: string;
}

/**
 * Converts a row in CSV format into a {@link Day} object.
 * @param row the row to convert
 * @returns A {@link Day} object representing the row provided.
 */
export function convertRowIntoDay(row: AutoSleepCsvRow): Day {
  // Extract the time asleep value, which might be in one of two formats
  const asleepTimePattern1 = /(\d{2}):(\d{2}):\d{2}/;
  const asleepTimePattern2 = /(\d*)h? ?(\d*)m?/;
  let timeAsleepMatch = row.asleep.match(asleepTimePattern1) || row.asleep.match(asleepTimePattern2);

  // There must be a time asleep value, even if no sleep happened
  if (timeAsleepMatch === null) {
    error(500, `Unexpected time asleep value: ${row.asleep}.`);
  }

  const asleepDuration = {
    hours: Number.parseInt(timeAsleepMatch[1] || '0'),
    minutes: Number.parseInt(timeAsleepMatch[2] || '0')
  } satisfies Duration;

  // Extract dates for the end of this night, the bedtime, and waketime
  const toDate = new Date(row.toDate);
  let inBed = row.bedtime ? new Date(row.bedtime) : undefined;
  let awake = row.waketime ? new Date(row.waketime) : undefined;

  const displayFormat = Intl.DateTimeFormat('en-US', {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric",
  });

  return {
    displayString: displayFormat.format(toDate),
    iso: toDate.toISOString(),
    date: toDate.getDate(),
    asleepDuration,
    inBedTime: getTimeFromDate(inBed),
    wakeUpTime: getTimeFromDate(awake),
    note: row.notes.length > 0 ? row.notes : undefined,
  }
}
